name: Page Deploy

env:
  NODE_VERSION: '20'

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: write
  pages: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref_type == 'branch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0
      - name: Set up Git user
        uses: fregante/setup-git-user@v2
      - name: Set up Node
        uses: actions/setup-node@master
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Get tag
        id: get-tag
        run: |
          # Check if head is not tagged
          TAG_LIST=($(git tag --contains))
          TAG=${TAG_LIST[0]}
          if [ -z $TAG ]; then
            # Check if package version equal latest tag in main
            TAG=v$(npm pkg get version | tr -d '"')
            LAST_TAG=$(git describe --tags --abbrev=0)
            if [ "$TAG" == "$LAST_TAG" ]; then
              # No change made to package version, do one now
              TAG=$(npm version patch)
              git push --follow-tags
            else
              # Package version changed, tag it now
              git push origin :refs/tags/$TAG
              git tag -f $TAG
              git push origin --tags
            fi
          fi
          echo "Tag: $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
      - name: Code build
        run: |
          npm install
          npm run build
      - name: Set up pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'dist'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Create release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.get-tag.outputs.tag }}
          generateReleaseNotes: true
